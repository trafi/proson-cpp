// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dto.proto

#ifndef PROTOBUF_dto_2eproto__INCLUDED
#define PROTOBUF_dto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace dto {
class NestedChild;
class NestedChildDefaultTypeInternal;
extern NestedChildDefaultTypeInternal _NestedChild_default_instance_;
class NestedParent;
class NestedParentDefaultTypeInternal;
extern NestedParentDefaultTypeInternal _NestedParent_default_instance_;
class Values;
class ValuesDefaultTypeInternal;
extern ValuesDefaultTypeInternal _Values_default_instance_;
}  // namespace dto

namespace dto {

namespace protobuf_dto_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dto_2eproto

enum EnumValue {
  None = 0,
  Some = 1,
  Other = 3
};
bool EnumValue_IsValid(int value);
const EnumValue EnumValue_MIN = None;
const EnumValue EnumValue_MAX = Other;
const int EnumValue_ARRAYSIZE = EnumValue_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnumValue_descriptor();
inline const ::std::string& EnumValue_Name(EnumValue value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnumValue_descriptor(), value);
}
inline bool EnumValue_Parse(
    const ::std::string& name, EnumValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnumValue>(
    EnumValue_descriptor(), name, value);
}
// ===================================================================

class Values : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.Values) */ {
 public:
  Values();
  virtual ~Values();

  Values(const Values& from);

  inline Values& operator=(const Values& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Values& default_instance();

  static inline const Values* internal_default_instance() {
    return reinterpret_cast<const Values*>(
               &_Values_default_instance_);
  }

  void Swap(Values* other);

  // implements Message ----------------------------------------------

  inline Values* New() const PROTOBUF_FINAL { return New(NULL); }

  Values* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Values& from);
  void MergeFrom(const Values& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Values* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ValString = 14;
  bool has_valstring() const;
  void clear_valstring();
  static const int kValStringFieldNumber = 14;
  const ::std::string& valstring() const;
  void set_valstring(const ::std::string& value);
  #if LANG_CXX11
  void set_valstring(::std::string&& value);
  #endif
  void set_valstring(const char* value);
  void set_valstring(const char* value, size_t size);
  ::std::string* mutable_valstring();
  ::std::string* release_valstring();
  void set_allocated_valstring(::std::string* valstring);

  // required bytes ValBytes = 15;
  bool has_valbytes() const;
  void clear_valbytes();
  static const int kValBytesFieldNumber = 15;
  const ::std::string& valbytes() const;
  void set_valbytes(const ::std::string& value);
  #if LANG_CXX11
  void set_valbytes(::std::string&& value);
  #endif
  void set_valbytes(const char* value);
  void set_valbytes(const void* value, size_t size);
  ::std::string* mutable_valbytes();
  ::std::string* release_valbytes();
  void set_allocated_valbytes(::std::string* valbytes);

  // required double ValDouble = 1;
  bool has_valdouble() const;
  void clear_valdouble();
  static const int kValDoubleFieldNumber = 1;
  double valdouble() const;
  void set_valdouble(double value);

  // required float ValFloat = 2;
  bool has_valfloat() const;
  void clear_valfloat();
  static const int kValFloatFieldNumber = 2;
  float valfloat() const;
  void set_valfloat(float value);

  // required uint32 ValUInt32 = 5;
  bool has_valuint32() const;
  void clear_valuint32();
  static const int kValUInt32FieldNumber = 5;
  ::google::protobuf::uint32 valuint32() const;
  void set_valuint32(::google::protobuf::uint32 value);

  // required int64 ValInt64 = 4;
  bool has_valint64() const;
  void clear_valint64();
  static const int kValInt64FieldNumber = 4;
  ::google::protobuf::int64 valint64() const;
  void set_valint64(::google::protobuf::int64 value);

  // required uint64 ValUInt64 = 6;
  bool has_valuint64() const;
  void clear_valuint64();
  static const int kValUInt64FieldNumber = 6;
  ::google::protobuf::uint64 valuint64() const;
  void set_valuint64(::google::protobuf::uint64 value);

  // required sint64 ValSInt64 = 8;
  bool has_valsint64() const;
  void clear_valsint64();
  static const int kValSInt64FieldNumber = 8;
  ::google::protobuf::int64 valsint64() const;
  void set_valsint64(::google::protobuf::int64 value);

  // required sint32 ValSInt32 = 7;
  bool has_valsint32() const;
  void clear_valsint32();
  static const int kValSInt32FieldNumber = 7;
  ::google::protobuf::int32 valsint32() const;
  void set_valsint32(::google::protobuf::int32 value);

  // required fixed32 ValFixed32 = 9;
  bool has_valfixed32() const;
  void clear_valfixed32();
  static const int kValFixed32FieldNumber = 9;
  ::google::protobuf::uint32 valfixed32() const;
  void set_valfixed32(::google::protobuf::uint32 value);

  // required fixed64 ValFixed64 = 10;
  bool has_valfixed64() const;
  void clear_valfixed64();
  static const int kValFixed64FieldNumber = 10;
  ::google::protobuf::uint64 valfixed64() const;
  void set_valfixed64(::google::protobuf::uint64 value);

  // required sfixed64 ValSFixed64 = 12;
  bool has_valsfixed64() const;
  void clear_valsfixed64();
  static const int kValSFixed64FieldNumber = 12;
  ::google::protobuf::int64 valsfixed64() const;
  void set_valsfixed64(::google::protobuf::int64 value);

  // required sfixed32 ValSFixed32 = 11;
  bool has_valsfixed32() const;
  void clear_valsfixed32();
  static const int kValSFixed32FieldNumber = 11;
  ::google::protobuf::int32 valsfixed32() const;
  void set_valsfixed32(::google::protobuf::int32 value);

  // required bool ValBool = 13;
  bool has_valbool() const;
  void clear_valbool();
  static const int kValBoolFieldNumber = 13;
  bool valbool() const;
  void set_valbool(bool value);

  // required .dto.EnumValue ValEnum = 16;
  bool has_valenum() const;
  void clear_valenum();
  static const int kValEnumFieldNumber = 16;
  ::dto::EnumValue valenum() const;
  void set_valenum(::dto::EnumValue value);

  // required int32 ValInt32 = 3 [default = 42];
  bool has_valint32() const;
  void clear_valint32();
  static const int kValInt32FieldNumber = 3;
  ::google::protobuf::int32 valint32() const;
  void set_valint32(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dto.Values)
 private:
  void set_has_valdouble();
  void clear_has_valdouble();
  void set_has_valfloat();
  void clear_has_valfloat();
  void set_has_valint32();
  void clear_has_valint32();
  void set_has_valint64();
  void clear_has_valint64();
  void set_has_valuint32();
  void clear_has_valuint32();
  void set_has_valuint64();
  void clear_has_valuint64();
  void set_has_valsint32();
  void clear_has_valsint32();
  void set_has_valsint64();
  void clear_has_valsint64();
  void set_has_valfixed32();
  void clear_has_valfixed32();
  void set_has_valfixed64();
  void clear_has_valfixed64();
  void set_has_valsfixed32();
  void clear_has_valsfixed32();
  void set_has_valsfixed64();
  void clear_has_valsfixed64();
  void set_has_valbool();
  void clear_has_valbool();
  void set_has_valstring();
  void clear_has_valstring();
  void set_has_valbytes();
  void clear_has_valbytes();
  void set_has_valenum();
  void clear_has_valenum();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr valstring_;
  ::google::protobuf::internal::ArenaStringPtr valbytes_;
  double valdouble_;
  float valfloat_;
  ::google::protobuf::uint32 valuint32_;
  ::google::protobuf::int64 valint64_;
  ::google::protobuf::uint64 valuint64_;
  ::google::protobuf::int64 valsint64_;
  ::google::protobuf::int32 valsint32_;
  ::google::protobuf::uint32 valfixed32_;
  ::google::protobuf::uint64 valfixed64_;
  ::google::protobuf::int64 valsfixed64_;
  ::google::protobuf::int32 valsfixed32_;
  bool valbool_;
  int valenum_;
  ::google::protobuf::int32 valint32_;
  friend struct  protobuf_dto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NestedChild : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.NestedChild) */ {
 public:
  NestedChild();
  virtual ~NestedChild();

  NestedChild(const NestedChild& from);

  inline NestedChild& operator=(const NestedChild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NestedChild& default_instance();

  static inline const NestedChild* internal_default_instance() {
    return reinterpret_cast<const NestedChild*>(
               &_NestedChild_default_instance_);
  }

  void Swap(NestedChild* other);

  // implements Message ----------------------------------------------

  inline NestedChild* New() const PROTOBUF_FINAL { return New(NULL); }

  NestedChild* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NestedChild& from);
  void MergeFrom(const NestedChild& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NestedChild* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:dto.NestedChild)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float x_;
  float y_;
  friend struct  protobuf_dto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NestedParent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dto.NestedParent) */ {
 public:
  NestedParent();
  virtual ~NestedParent();

  NestedParent(const NestedParent& from);

  inline NestedParent& operator=(const NestedParent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NestedParent& default_instance();

  static inline const NestedParent* internal_default_instance() {
    return reinterpret_cast<const NestedParent*>(
               &_NestedParent_default_instance_);
  }

  void Swap(NestedParent* other);

  // implements Message ----------------------------------------------

  inline NestedParent* New() const PROTOBUF_FINAL { return New(NULL); }

  NestedParent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NestedParent& from);
  void MergeFrom(const NestedParent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NestedParent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dto.NestedChild Children = 3;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 3;
  const ::dto::NestedChild& children(int index) const;
  ::dto::NestedChild* mutable_children(int index);
  ::dto::NestedChild* add_children();
  ::google::protobuf::RepeatedPtrField< ::dto::NestedChild >*
      mutable_children();
  const ::google::protobuf::RepeatedPtrField< ::dto::NestedChild >&
      children() const;

  // repeated double RepDouble = 4;
  int repdouble_size() const;
  void clear_repdouble();
  static const int kRepDoubleFieldNumber = 4;
  double repdouble(int index) const;
  void set_repdouble(int index, double value);
  void add_repdouble(double value);
  const ::google::protobuf::RepeatedField< double >&
      repdouble() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_repdouble();

  // repeated float RepFloat = 5;
  int repfloat_size() const;
  void clear_repfloat();
  static const int kRepFloatFieldNumber = 5;
  float repfloat(int index) const;
  void set_repfloat(int index, float value);
  void add_repfloat(float value);
  const ::google::protobuf::RepeatedField< float >&
      repfloat() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_repfloat();

  // repeated int32 RepInt32 = 6;
  int repint32_size() const;
  void clear_repint32();
  static const int kRepInt32FieldNumber = 6;
  ::google::protobuf::int32 repint32(int index) const;
  void set_repint32(int index, ::google::protobuf::int32 value);
  void add_repint32(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      repint32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_repint32();

  // repeated int64 RepInt64 = 7;
  int repint64_size() const;
  void clear_repint64();
  static const int kRepInt64FieldNumber = 7;
  ::google::protobuf::int64 repint64(int index) const;
  void set_repint64(int index, ::google::protobuf::int64 value);
  void add_repint64(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      repint64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_repint64();

  // repeated uint32 RepUInt32 = 8;
  int repuint32_size() const;
  void clear_repuint32();
  static const int kRepUInt32FieldNumber = 8;
  ::google::protobuf::uint32 repuint32(int index) const;
  void set_repuint32(int index, ::google::protobuf::uint32 value);
  void add_repuint32(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      repuint32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_repuint32();

  // repeated uint64 RepUInt64 = 9;
  int repuint64_size() const;
  void clear_repuint64();
  static const int kRepUInt64FieldNumber = 9;
  ::google::protobuf::uint64 repuint64(int index) const;
  void set_repuint64(int index, ::google::protobuf::uint64 value);
  void add_repuint64(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      repuint64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_repuint64();

  // repeated sint32 RepSInt32 = 10;
  int repsint32_size() const;
  void clear_repsint32();
  static const int kRepSInt32FieldNumber = 10;
  ::google::protobuf::int32 repsint32(int index) const;
  void set_repsint32(int index, ::google::protobuf::int32 value);
  void add_repsint32(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      repsint32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_repsint32();

  // repeated sint64 RepSInt64 = 11;
  int repsint64_size() const;
  void clear_repsint64();
  static const int kRepSInt64FieldNumber = 11;
  ::google::protobuf::int64 repsint64(int index) const;
  void set_repsint64(int index, ::google::protobuf::int64 value);
  void add_repsint64(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      repsint64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_repsint64();

  // repeated fixed32 RepFixed32 = 12;
  int repfixed32_size() const;
  void clear_repfixed32();
  static const int kRepFixed32FieldNumber = 12;
  ::google::protobuf::uint32 repfixed32(int index) const;
  void set_repfixed32(int index, ::google::protobuf::uint32 value);
  void add_repfixed32(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      repfixed32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_repfixed32();

  // repeated fixed64 RepFixed64 = 13;
  int repfixed64_size() const;
  void clear_repfixed64();
  static const int kRepFixed64FieldNumber = 13;
  ::google::protobuf::uint64 repfixed64(int index) const;
  void set_repfixed64(int index, ::google::protobuf::uint64 value);
  void add_repfixed64(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      repfixed64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_repfixed64();

  // repeated sfixed32 RepSFixed32 = 14;
  int repsfixed32_size() const;
  void clear_repsfixed32();
  static const int kRepSFixed32FieldNumber = 14;
  ::google::protobuf::int32 repsfixed32(int index) const;
  void set_repsfixed32(int index, ::google::protobuf::int32 value);
  void add_repsfixed32(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      repsfixed32() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_repsfixed32();

  // repeated sfixed64 RepSFixed64 = 15;
  int repsfixed64_size() const;
  void clear_repsfixed64();
  static const int kRepSFixed64FieldNumber = 15;
  ::google::protobuf::int64 repsfixed64(int index) const;
  void set_repsfixed64(int index, ::google::protobuf::int64 value);
  void add_repsfixed64(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      repsfixed64() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_repsfixed64();

  // repeated bool RepBool = 16;
  int repbool_size() const;
  void clear_repbool();
  static const int kRepBoolFieldNumber = 16;
  bool repbool(int index) const;
  void set_repbool(int index, bool value);
  void add_repbool(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      repbool() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_repbool();

  // repeated string RepString = 17;
  int repstring_size() const;
  void clear_repstring();
  static const int kRepStringFieldNumber = 17;
  const ::std::string& repstring(int index) const;
  ::std::string* mutable_repstring(int index);
  void set_repstring(int index, const ::std::string& value);
  void set_repstring(int index, const char* value);
  void set_repstring(int index, const char* value, size_t size);
  ::std::string* add_repstring();
  void add_repstring(const ::std::string& value);
  void add_repstring(const char* value);
  void add_repstring(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& repstring() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_repstring();

  // repeated bytes RepBytes = 18;
  int repbytes_size() const;
  void clear_repbytes();
  static const int kRepBytesFieldNumber = 18;
  const ::std::string& repbytes(int index) const;
  ::std::string* mutable_repbytes(int index);
  void set_repbytes(int index, const ::std::string& value);
  void set_repbytes(int index, const char* value);
  void set_repbytes(int index, const void* value, size_t size);
  ::std::string* add_repbytes();
  void add_repbytes(const ::std::string& value);
  void add_repbytes(const char* value);
  void add_repbytes(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& repbytes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_repbytes();

  // repeated .dto.EnumValue RepEnum = 19;
  int repenum_size() const;
  void clear_repenum();
  static const int kRepEnumFieldNumber = 19;
  ::dto::EnumValue repenum(int index) const;
  void set_repenum(int index, ::dto::EnumValue value);
  void add_repenum(::dto::EnumValue value);
  const ::google::protobuf::RepeatedField<int>& repenum() const;
  ::google::protobuf::RepeatedField<int>* mutable_repenum();

  // optional .dto.NestedChild OptionalChild = 1;
  bool has_optionalchild() const;
  void clear_optionalchild();
  static const int kOptionalChildFieldNumber = 1;
  const ::dto::NestedChild& optionalchild() const;
  ::dto::NestedChild* mutable_optionalchild();
  ::dto::NestedChild* release_optionalchild();
  void set_allocated_optionalchild(::dto::NestedChild* optionalchild);

  // required .dto.NestedChild RequiredChild = 2;
  bool has_requiredchild() const;
  void clear_requiredchild();
  static const int kRequiredChildFieldNumber = 2;
  const ::dto::NestedChild& requiredchild() const;
  ::dto::NestedChild* mutable_requiredchild();
  ::dto::NestedChild* release_requiredchild();
  void set_allocated_requiredchild(::dto::NestedChild* requiredchild);

  // @@protoc_insertion_point(class_scope:dto.NestedParent)
 private:
  void set_has_optionalchild();
  void clear_has_optionalchild();
  void set_has_requiredchild();
  void clear_has_requiredchild();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dto::NestedChild > children_;
  ::google::protobuf::RepeatedField< double > repdouble_;
  ::google::protobuf::RepeatedField< float > repfloat_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > repint32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > repint64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > repuint32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > repuint64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > repsint32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > repsint64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > repfixed32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > repfixed64_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > repsfixed32_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > repsfixed64_;
  ::google::protobuf::RepeatedField< bool > repbool_;
  ::google::protobuf::RepeatedPtrField< ::std::string> repstring_;
  ::google::protobuf::RepeatedPtrField< ::std::string> repbytes_;
  ::google::protobuf::RepeatedField<int> repenum_;
  ::dto::NestedChild* optionalchild_;
  ::dto::NestedChild* requiredchild_;
  friend struct  protobuf_dto_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Values

// required double ValDouble = 1;
inline bool Values::has_valdouble() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Values::set_has_valdouble() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Values::clear_has_valdouble() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Values::clear_valdouble() {
  valdouble_ = 0;
  clear_has_valdouble();
}
inline double Values::valdouble() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValDouble)
  return valdouble_;
}
inline void Values::set_valdouble(double value) {
  set_has_valdouble();
  valdouble_ = value;
  // @@protoc_insertion_point(field_set:dto.Values.ValDouble)
}

// required float ValFloat = 2;
inline bool Values::has_valfloat() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Values::set_has_valfloat() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Values::clear_has_valfloat() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Values::clear_valfloat() {
  valfloat_ = 0;
  clear_has_valfloat();
}
inline float Values::valfloat() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValFloat)
  return valfloat_;
}
inline void Values::set_valfloat(float value) {
  set_has_valfloat();
  valfloat_ = value;
  // @@protoc_insertion_point(field_set:dto.Values.ValFloat)
}

// required int32 ValInt32 = 3 [default = 42];
inline bool Values::has_valint32() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Values::set_has_valint32() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Values::clear_has_valint32() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Values::clear_valint32() {
  valint32_ = 42;
  clear_has_valint32();
}
inline ::google::protobuf::int32 Values::valint32() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValInt32)
  return valint32_;
}
inline void Values::set_valint32(::google::protobuf::int32 value) {
  set_has_valint32();
  valint32_ = value;
  // @@protoc_insertion_point(field_set:dto.Values.ValInt32)
}

// required int64 ValInt64 = 4;
inline bool Values::has_valint64() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Values::set_has_valint64() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Values::clear_has_valint64() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Values::clear_valint64() {
  valint64_ = GOOGLE_LONGLONG(0);
  clear_has_valint64();
}
inline ::google::protobuf::int64 Values::valint64() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValInt64)
  return valint64_;
}
inline void Values::set_valint64(::google::protobuf::int64 value) {
  set_has_valint64();
  valint64_ = value;
  // @@protoc_insertion_point(field_set:dto.Values.ValInt64)
}

// required uint32 ValUInt32 = 5;
inline bool Values::has_valuint32() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Values::set_has_valuint32() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Values::clear_has_valuint32() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Values::clear_valuint32() {
  valuint32_ = 0u;
  clear_has_valuint32();
}
inline ::google::protobuf::uint32 Values::valuint32() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValUInt32)
  return valuint32_;
}
inline void Values::set_valuint32(::google::protobuf::uint32 value) {
  set_has_valuint32();
  valuint32_ = value;
  // @@protoc_insertion_point(field_set:dto.Values.ValUInt32)
}

// required uint64 ValUInt64 = 6;
inline bool Values::has_valuint64() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Values::set_has_valuint64() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Values::clear_has_valuint64() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Values::clear_valuint64() {
  valuint64_ = GOOGLE_ULONGLONG(0);
  clear_has_valuint64();
}
inline ::google::protobuf::uint64 Values::valuint64() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValUInt64)
  return valuint64_;
}
inline void Values::set_valuint64(::google::protobuf::uint64 value) {
  set_has_valuint64();
  valuint64_ = value;
  // @@protoc_insertion_point(field_set:dto.Values.ValUInt64)
}

// required sint32 ValSInt32 = 7;
inline bool Values::has_valsint32() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Values::set_has_valsint32() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Values::clear_has_valsint32() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Values::clear_valsint32() {
  valsint32_ = 0;
  clear_has_valsint32();
}
inline ::google::protobuf::int32 Values::valsint32() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValSInt32)
  return valsint32_;
}
inline void Values::set_valsint32(::google::protobuf::int32 value) {
  set_has_valsint32();
  valsint32_ = value;
  // @@protoc_insertion_point(field_set:dto.Values.ValSInt32)
}

// required sint64 ValSInt64 = 8;
inline bool Values::has_valsint64() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Values::set_has_valsint64() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Values::clear_has_valsint64() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Values::clear_valsint64() {
  valsint64_ = GOOGLE_LONGLONG(0);
  clear_has_valsint64();
}
inline ::google::protobuf::int64 Values::valsint64() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValSInt64)
  return valsint64_;
}
inline void Values::set_valsint64(::google::protobuf::int64 value) {
  set_has_valsint64();
  valsint64_ = value;
  // @@protoc_insertion_point(field_set:dto.Values.ValSInt64)
}

// required fixed32 ValFixed32 = 9;
inline bool Values::has_valfixed32() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Values::set_has_valfixed32() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Values::clear_has_valfixed32() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Values::clear_valfixed32() {
  valfixed32_ = 0u;
  clear_has_valfixed32();
}
inline ::google::protobuf::uint32 Values::valfixed32() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValFixed32)
  return valfixed32_;
}
inline void Values::set_valfixed32(::google::protobuf::uint32 value) {
  set_has_valfixed32();
  valfixed32_ = value;
  // @@protoc_insertion_point(field_set:dto.Values.ValFixed32)
}

// required fixed64 ValFixed64 = 10;
inline bool Values::has_valfixed64() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Values::set_has_valfixed64() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Values::clear_has_valfixed64() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Values::clear_valfixed64() {
  valfixed64_ = GOOGLE_ULONGLONG(0);
  clear_has_valfixed64();
}
inline ::google::protobuf::uint64 Values::valfixed64() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValFixed64)
  return valfixed64_;
}
inline void Values::set_valfixed64(::google::protobuf::uint64 value) {
  set_has_valfixed64();
  valfixed64_ = value;
  // @@protoc_insertion_point(field_set:dto.Values.ValFixed64)
}

// required sfixed32 ValSFixed32 = 11;
inline bool Values::has_valsfixed32() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Values::set_has_valsfixed32() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Values::clear_has_valsfixed32() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Values::clear_valsfixed32() {
  valsfixed32_ = 0;
  clear_has_valsfixed32();
}
inline ::google::protobuf::int32 Values::valsfixed32() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValSFixed32)
  return valsfixed32_;
}
inline void Values::set_valsfixed32(::google::protobuf::int32 value) {
  set_has_valsfixed32();
  valsfixed32_ = value;
  // @@protoc_insertion_point(field_set:dto.Values.ValSFixed32)
}

// required sfixed64 ValSFixed64 = 12;
inline bool Values::has_valsfixed64() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Values::set_has_valsfixed64() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Values::clear_has_valsfixed64() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Values::clear_valsfixed64() {
  valsfixed64_ = GOOGLE_LONGLONG(0);
  clear_has_valsfixed64();
}
inline ::google::protobuf::int64 Values::valsfixed64() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValSFixed64)
  return valsfixed64_;
}
inline void Values::set_valsfixed64(::google::protobuf::int64 value) {
  set_has_valsfixed64();
  valsfixed64_ = value;
  // @@protoc_insertion_point(field_set:dto.Values.ValSFixed64)
}

// required bool ValBool = 13;
inline bool Values::has_valbool() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Values::set_has_valbool() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Values::clear_has_valbool() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Values::clear_valbool() {
  valbool_ = false;
  clear_has_valbool();
}
inline bool Values::valbool() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValBool)
  return valbool_;
}
inline void Values::set_valbool(bool value) {
  set_has_valbool();
  valbool_ = value;
  // @@protoc_insertion_point(field_set:dto.Values.ValBool)
}

// required string ValString = 14;
inline bool Values::has_valstring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Values::set_has_valstring() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Values::clear_has_valstring() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Values::clear_valstring() {
  valstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_valstring();
}
inline const ::std::string& Values::valstring() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValString)
  return valstring_.GetNoArena();
}
inline void Values::set_valstring(const ::std::string& value) {
  set_has_valstring();
  valstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.Values.ValString)
}
#if LANG_CXX11
inline void Values::set_valstring(::std::string&& value) {
  set_has_valstring();
  valstring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.Values.ValString)
}
#endif
inline void Values::set_valstring(const char* value) {
  set_has_valstring();
  valstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.Values.ValString)
}
inline void Values::set_valstring(const char* value, size_t size) {
  set_has_valstring();
  valstring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.Values.ValString)
}
inline ::std::string* Values::mutable_valstring() {
  set_has_valstring();
  // @@protoc_insertion_point(field_mutable:dto.Values.ValString)
  return valstring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Values::release_valstring() {
  // @@protoc_insertion_point(field_release:dto.Values.ValString)
  clear_has_valstring();
  return valstring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Values::set_allocated_valstring(::std::string* valstring) {
  if (valstring != NULL) {
    set_has_valstring();
  } else {
    clear_has_valstring();
  }
  valstring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valstring);
  // @@protoc_insertion_point(field_set_allocated:dto.Values.ValString)
}

// required bytes ValBytes = 15;
inline bool Values::has_valbytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Values::set_has_valbytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Values::clear_has_valbytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Values::clear_valbytes() {
  valbytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_valbytes();
}
inline const ::std::string& Values::valbytes() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValBytes)
  return valbytes_.GetNoArena();
}
inline void Values::set_valbytes(const ::std::string& value) {
  set_has_valbytes();
  valbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dto.Values.ValBytes)
}
#if LANG_CXX11
inline void Values::set_valbytes(::std::string&& value) {
  set_has_valbytes();
  valbytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dto.Values.ValBytes)
}
#endif
inline void Values::set_valbytes(const char* value) {
  set_has_valbytes();
  valbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dto.Values.ValBytes)
}
inline void Values::set_valbytes(const void* value, size_t size) {
  set_has_valbytes();
  valbytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dto.Values.ValBytes)
}
inline ::std::string* Values::mutable_valbytes() {
  set_has_valbytes();
  // @@protoc_insertion_point(field_mutable:dto.Values.ValBytes)
  return valbytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Values::release_valbytes() {
  // @@protoc_insertion_point(field_release:dto.Values.ValBytes)
  clear_has_valbytes();
  return valbytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Values::set_allocated_valbytes(::std::string* valbytes) {
  if (valbytes != NULL) {
    set_has_valbytes();
  } else {
    clear_has_valbytes();
  }
  valbytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), valbytes);
  // @@protoc_insertion_point(field_set_allocated:dto.Values.ValBytes)
}

// required .dto.EnumValue ValEnum = 16;
inline bool Values::has_valenum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Values::set_has_valenum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Values::clear_has_valenum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Values::clear_valenum() {
  valenum_ = 0;
  clear_has_valenum();
}
inline ::dto::EnumValue Values::valenum() const {
  // @@protoc_insertion_point(field_get:dto.Values.ValEnum)
  return static_cast< ::dto::EnumValue >(valenum_);
}
inline void Values::set_valenum(::dto::EnumValue value) {
  assert(::dto::EnumValue_IsValid(value));
  set_has_valenum();
  valenum_ = value;
  // @@protoc_insertion_point(field_set:dto.Values.ValEnum)
}

// -------------------------------------------------------------------

// NestedChild

// required float x = 1;
inline bool NestedChild::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NestedChild::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NestedChild::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NestedChild::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float NestedChild::x() const {
  // @@protoc_insertion_point(field_get:dto.NestedChild.x)
  return x_;
}
inline void NestedChild::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:dto.NestedChild.x)
}

// required float y = 2;
inline bool NestedChild::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NestedChild::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NestedChild::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NestedChild::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float NestedChild::y() const {
  // @@protoc_insertion_point(field_get:dto.NestedChild.y)
  return y_;
}
inline void NestedChild::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:dto.NestedChild.y)
}

// -------------------------------------------------------------------

// NestedParent

// optional .dto.NestedChild OptionalChild = 1;
inline bool NestedParent::has_optionalchild() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NestedParent::set_has_optionalchild() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NestedParent::clear_has_optionalchild() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NestedParent::clear_optionalchild() {
  if (optionalchild_ != NULL) optionalchild_->::dto::NestedChild::Clear();
  clear_has_optionalchild();
}
inline const ::dto::NestedChild& NestedParent::optionalchild() const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.OptionalChild)
  return optionalchild_ != NULL ? *optionalchild_
                         : *::dto::NestedChild::internal_default_instance();
}
inline ::dto::NestedChild* NestedParent::mutable_optionalchild() {
  set_has_optionalchild();
  if (optionalchild_ == NULL) {
    optionalchild_ = new ::dto::NestedChild;
  }
  // @@protoc_insertion_point(field_mutable:dto.NestedParent.OptionalChild)
  return optionalchild_;
}
inline ::dto::NestedChild* NestedParent::release_optionalchild() {
  // @@protoc_insertion_point(field_release:dto.NestedParent.OptionalChild)
  clear_has_optionalchild();
  ::dto::NestedChild* temp = optionalchild_;
  optionalchild_ = NULL;
  return temp;
}
inline void NestedParent::set_allocated_optionalchild(::dto::NestedChild* optionalchild) {
  delete optionalchild_;
  optionalchild_ = optionalchild;
  if (optionalchild) {
    set_has_optionalchild();
  } else {
    clear_has_optionalchild();
  }
  // @@protoc_insertion_point(field_set_allocated:dto.NestedParent.OptionalChild)
}

// required .dto.NestedChild RequiredChild = 2;
inline bool NestedParent::has_requiredchild() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NestedParent::set_has_requiredchild() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NestedParent::clear_has_requiredchild() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NestedParent::clear_requiredchild() {
  if (requiredchild_ != NULL) requiredchild_->::dto::NestedChild::Clear();
  clear_has_requiredchild();
}
inline const ::dto::NestedChild& NestedParent::requiredchild() const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RequiredChild)
  return requiredchild_ != NULL ? *requiredchild_
                         : *::dto::NestedChild::internal_default_instance();
}
inline ::dto::NestedChild* NestedParent::mutable_requiredchild() {
  set_has_requiredchild();
  if (requiredchild_ == NULL) {
    requiredchild_ = new ::dto::NestedChild;
  }
  // @@protoc_insertion_point(field_mutable:dto.NestedParent.RequiredChild)
  return requiredchild_;
}
inline ::dto::NestedChild* NestedParent::release_requiredchild() {
  // @@protoc_insertion_point(field_release:dto.NestedParent.RequiredChild)
  clear_has_requiredchild();
  ::dto::NestedChild* temp = requiredchild_;
  requiredchild_ = NULL;
  return temp;
}
inline void NestedParent::set_allocated_requiredchild(::dto::NestedChild* requiredchild) {
  delete requiredchild_;
  requiredchild_ = requiredchild;
  if (requiredchild) {
    set_has_requiredchild();
  } else {
    clear_has_requiredchild();
  }
  // @@protoc_insertion_point(field_set_allocated:dto.NestedParent.RequiredChild)
}

// repeated .dto.NestedChild Children = 3;
inline int NestedParent::children_size() const {
  return children_.size();
}
inline void NestedParent::clear_children() {
  children_.Clear();
}
inline const ::dto::NestedChild& NestedParent::children(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.Children)
  return children_.Get(index);
}
inline ::dto::NestedChild* NestedParent::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:dto.NestedParent.Children)
  return children_.Mutable(index);
}
inline ::dto::NestedChild* NestedParent::add_children() {
  // @@protoc_insertion_point(field_add:dto.NestedParent.Children)
  return children_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dto::NestedChild >*
NestedParent::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.Children)
  return &children_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dto::NestedChild >&
NestedParent::children() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.Children)
  return children_;
}

// repeated double RepDouble = 4;
inline int NestedParent::repdouble_size() const {
  return repdouble_.size();
}
inline void NestedParent::clear_repdouble() {
  repdouble_.Clear();
}
inline double NestedParent::repdouble(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepDouble)
  return repdouble_.Get(index);
}
inline void NestedParent::set_repdouble(int index, double value) {
  repdouble_.Set(index, value);
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepDouble)
}
inline void NestedParent::add_repdouble(double value) {
  repdouble_.Add(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepDouble)
}
inline const ::google::protobuf::RepeatedField< double >&
NestedParent::repdouble() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepDouble)
  return repdouble_;
}
inline ::google::protobuf::RepeatedField< double >*
NestedParent::mutable_repdouble() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepDouble)
  return &repdouble_;
}

// repeated float RepFloat = 5;
inline int NestedParent::repfloat_size() const {
  return repfloat_.size();
}
inline void NestedParent::clear_repfloat() {
  repfloat_.Clear();
}
inline float NestedParent::repfloat(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepFloat)
  return repfloat_.Get(index);
}
inline void NestedParent::set_repfloat(int index, float value) {
  repfloat_.Set(index, value);
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepFloat)
}
inline void NestedParent::add_repfloat(float value) {
  repfloat_.Add(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepFloat)
}
inline const ::google::protobuf::RepeatedField< float >&
NestedParent::repfloat() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepFloat)
  return repfloat_;
}
inline ::google::protobuf::RepeatedField< float >*
NestedParent::mutable_repfloat() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepFloat)
  return &repfloat_;
}

// repeated int32 RepInt32 = 6;
inline int NestedParent::repint32_size() const {
  return repint32_.size();
}
inline void NestedParent::clear_repint32() {
  repint32_.Clear();
}
inline ::google::protobuf::int32 NestedParent::repint32(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepInt32)
  return repint32_.Get(index);
}
inline void NestedParent::set_repint32(int index, ::google::protobuf::int32 value) {
  repint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepInt32)
}
inline void NestedParent::add_repint32(::google::protobuf::int32 value) {
  repint32_.Add(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepInt32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NestedParent::repint32() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepInt32)
  return repint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NestedParent::mutable_repint32() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepInt32)
  return &repint32_;
}

// repeated int64 RepInt64 = 7;
inline int NestedParent::repint64_size() const {
  return repint64_.size();
}
inline void NestedParent::clear_repint64() {
  repint64_.Clear();
}
inline ::google::protobuf::int64 NestedParent::repint64(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepInt64)
  return repint64_.Get(index);
}
inline void NestedParent::set_repint64(int index, ::google::protobuf::int64 value) {
  repint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepInt64)
}
inline void NestedParent::add_repint64(::google::protobuf::int64 value) {
  repint64_.Add(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepInt64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
NestedParent::repint64() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepInt64)
  return repint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
NestedParent::mutable_repint64() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepInt64)
  return &repint64_;
}

// repeated uint32 RepUInt32 = 8;
inline int NestedParent::repuint32_size() const {
  return repuint32_.size();
}
inline void NestedParent::clear_repuint32() {
  repuint32_.Clear();
}
inline ::google::protobuf::uint32 NestedParent::repuint32(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepUInt32)
  return repuint32_.Get(index);
}
inline void NestedParent::set_repuint32(int index, ::google::protobuf::uint32 value) {
  repuint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepUInt32)
}
inline void NestedParent::add_repuint32(::google::protobuf::uint32 value) {
  repuint32_.Add(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepUInt32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NestedParent::repuint32() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepUInt32)
  return repuint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NestedParent::mutable_repuint32() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepUInt32)
  return &repuint32_;
}

// repeated uint64 RepUInt64 = 9;
inline int NestedParent::repuint64_size() const {
  return repuint64_.size();
}
inline void NestedParent::clear_repuint64() {
  repuint64_.Clear();
}
inline ::google::protobuf::uint64 NestedParent::repuint64(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepUInt64)
  return repuint64_.Get(index);
}
inline void NestedParent::set_repuint64(int index, ::google::protobuf::uint64 value) {
  repuint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepUInt64)
}
inline void NestedParent::add_repuint64(::google::protobuf::uint64 value) {
  repuint64_.Add(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepUInt64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
NestedParent::repuint64() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepUInt64)
  return repuint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
NestedParent::mutable_repuint64() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepUInt64)
  return &repuint64_;
}

// repeated sint32 RepSInt32 = 10;
inline int NestedParent::repsint32_size() const {
  return repsint32_.size();
}
inline void NestedParent::clear_repsint32() {
  repsint32_.Clear();
}
inline ::google::protobuf::int32 NestedParent::repsint32(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepSInt32)
  return repsint32_.Get(index);
}
inline void NestedParent::set_repsint32(int index, ::google::protobuf::int32 value) {
  repsint32_.Set(index, value);
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepSInt32)
}
inline void NestedParent::add_repsint32(::google::protobuf::int32 value) {
  repsint32_.Add(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepSInt32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NestedParent::repsint32() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepSInt32)
  return repsint32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NestedParent::mutable_repsint32() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepSInt32)
  return &repsint32_;
}

// repeated sint64 RepSInt64 = 11;
inline int NestedParent::repsint64_size() const {
  return repsint64_.size();
}
inline void NestedParent::clear_repsint64() {
  repsint64_.Clear();
}
inline ::google::protobuf::int64 NestedParent::repsint64(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepSInt64)
  return repsint64_.Get(index);
}
inline void NestedParent::set_repsint64(int index, ::google::protobuf::int64 value) {
  repsint64_.Set(index, value);
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepSInt64)
}
inline void NestedParent::add_repsint64(::google::protobuf::int64 value) {
  repsint64_.Add(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepSInt64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
NestedParent::repsint64() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepSInt64)
  return repsint64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
NestedParent::mutable_repsint64() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepSInt64)
  return &repsint64_;
}

// repeated fixed32 RepFixed32 = 12;
inline int NestedParent::repfixed32_size() const {
  return repfixed32_.size();
}
inline void NestedParent::clear_repfixed32() {
  repfixed32_.Clear();
}
inline ::google::protobuf::uint32 NestedParent::repfixed32(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepFixed32)
  return repfixed32_.Get(index);
}
inline void NestedParent::set_repfixed32(int index, ::google::protobuf::uint32 value) {
  repfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepFixed32)
}
inline void NestedParent::add_repfixed32(::google::protobuf::uint32 value) {
  repfixed32_.Add(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepFixed32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NestedParent::repfixed32() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepFixed32)
  return repfixed32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NestedParent::mutable_repfixed32() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepFixed32)
  return &repfixed32_;
}

// repeated fixed64 RepFixed64 = 13;
inline int NestedParent::repfixed64_size() const {
  return repfixed64_.size();
}
inline void NestedParent::clear_repfixed64() {
  repfixed64_.Clear();
}
inline ::google::protobuf::uint64 NestedParent::repfixed64(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepFixed64)
  return repfixed64_.Get(index);
}
inline void NestedParent::set_repfixed64(int index, ::google::protobuf::uint64 value) {
  repfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepFixed64)
}
inline void NestedParent::add_repfixed64(::google::protobuf::uint64 value) {
  repfixed64_.Add(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepFixed64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
NestedParent::repfixed64() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepFixed64)
  return repfixed64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
NestedParent::mutable_repfixed64() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepFixed64)
  return &repfixed64_;
}

// repeated sfixed32 RepSFixed32 = 14;
inline int NestedParent::repsfixed32_size() const {
  return repsfixed32_.size();
}
inline void NestedParent::clear_repsfixed32() {
  repsfixed32_.Clear();
}
inline ::google::protobuf::int32 NestedParent::repsfixed32(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepSFixed32)
  return repsfixed32_.Get(index);
}
inline void NestedParent::set_repsfixed32(int index, ::google::protobuf::int32 value) {
  repsfixed32_.Set(index, value);
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepSFixed32)
}
inline void NestedParent::add_repsfixed32(::google::protobuf::int32 value) {
  repsfixed32_.Add(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepSFixed32)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NestedParent::repsfixed32() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepSFixed32)
  return repsfixed32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NestedParent::mutable_repsfixed32() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepSFixed32)
  return &repsfixed32_;
}

// repeated sfixed64 RepSFixed64 = 15;
inline int NestedParent::repsfixed64_size() const {
  return repsfixed64_.size();
}
inline void NestedParent::clear_repsfixed64() {
  repsfixed64_.Clear();
}
inline ::google::protobuf::int64 NestedParent::repsfixed64(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepSFixed64)
  return repsfixed64_.Get(index);
}
inline void NestedParent::set_repsfixed64(int index, ::google::protobuf::int64 value) {
  repsfixed64_.Set(index, value);
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepSFixed64)
}
inline void NestedParent::add_repsfixed64(::google::protobuf::int64 value) {
  repsfixed64_.Add(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepSFixed64)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
NestedParent::repsfixed64() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepSFixed64)
  return repsfixed64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
NestedParent::mutable_repsfixed64() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepSFixed64)
  return &repsfixed64_;
}

// repeated bool RepBool = 16;
inline int NestedParent::repbool_size() const {
  return repbool_.size();
}
inline void NestedParent::clear_repbool() {
  repbool_.Clear();
}
inline bool NestedParent::repbool(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepBool)
  return repbool_.Get(index);
}
inline void NestedParent::set_repbool(int index, bool value) {
  repbool_.Set(index, value);
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepBool)
}
inline void NestedParent::add_repbool(bool value) {
  repbool_.Add(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepBool)
}
inline const ::google::protobuf::RepeatedField< bool >&
NestedParent::repbool() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepBool)
  return repbool_;
}
inline ::google::protobuf::RepeatedField< bool >*
NestedParent::mutable_repbool() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepBool)
  return &repbool_;
}

// repeated string RepString = 17;
inline int NestedParent::repstring_size() const {
  return repstring_.size();
}
inline void NestedParent::clear_repstring() {
  repstring_.Clear();
}
inline const ::std::string& NestedParent::repstring(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepString)
  return repstring_.Get(index);
}
inline ::std::string* NestedParent::mutable_repstring(int index) {
  // @@protoc_insertion_point(field_mutable:dto.NestedParent.RepString)
  return repstring_.Mutable(index);
}
inline void NestedParent::set_repstring(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepString)
  repstring_.Mutable(index)->assign(value);
}
inline void NestedParent::set_repstring(int index, const char* value) {
  repstring_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dto.NestedParent.RepString)
}
inline void NestedParent::set_repstring(int index, const char* value, size_t size) {
  repstring_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dto.NestedParent.RepString)
}
inline ::std::string* NestedParent::add_repstring() {
  // @@protoc_insertion_point(field_add_mutable:dto.NestedParent.RepString)
  return repstring_.Add();
}
inline void NestedParent::add_repstring(const ::std::string& value) {
  repstring_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepString)
}
inline void NestedParent::add_repstring(const char* value) {
  repstring_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dto.NestedParent.RepString)
}
inline void NestedParent::add_repstring(const char* value, size_t size) {
  repstring_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dto.NestedParent.RepString)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NestedParent::repstring() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepString)
  return repstring_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NestedParent::mutable_repstring() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepString)
  return &repstring_;
}

// repeated bytes RepBytes = 18;
inline int NestedParent::repbytes_size() const {
  return repbytes_.size();
}
inline void NestedParent::clear_repbytes() {
  repbytes_.Clear();
}
inline const ::std::string& NestedParent::repbytes(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepBytes)
  return repbytes_.Get(index);
}
inline ::std::string* NestedParent::mutable_repbytes(int index) {
  // @@protoc_insertion_point(field_mutable:dto.NestedParent.RepBytes)
  return repbytes_.Mutable(index);
}
inline void NestedParent::set_repbytes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepBytes)
  repbytes_.Mutable(index)->assign(value);
}
inline void NestedParent::set_repbytes(int index, const char* value) {
  repbytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dto.NestedParent.RepBytes)
}
inline void NestedParent::set_repbytes(int index, const void* value, size_t size) {
  repbytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dto.NestedParent.RepBytes)
}
inline ::std::string* NestedParent::add_repbytes() {
  // @@protoc_insertion_point(field_add_mutable:dto.NestedParent.RepBytes)
  return repbytes_.Add();
}
inline void NestedParent::add_repbytes(const ::std::string& value) {
  repbytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepBytes)
}
inline void NestedParent::add_repbytes(const char* value) {
  repbytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dto.NestedParent.RepBytes)
}
inline void NestedParent::add_repbytes(const void* value, size_t size) {
  repbytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dto.NestedParent.RepBytes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NestedParent::repbytes() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepBytes)
  return repbytes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NestedParent::mutable_repbytes() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepBytes)
  return &repbytes_;
}

// repeated .dto.EnumValue RepEnum = 19;
inline int NestedParent::repenum_size() const {
  return repenum_.size();
}
inline void NestedParent::clear_repenum() {
  repenum_.Clear();
}
inline ::dto::EnumValue NestedParent::repenum(int index) const {
  // @@protoc_insertion_point(field_get:dto.NestedParent.RepEnum)
  return static_cast< ::dto::EnumValue >(repenum_.Get(index));
}
inline void NestedParent::set_repenum(int index, ::dto::EnumValue value) {
  assert(::dto::EnumValue_IsValid(value));
  repenum_.Set(index, value);
  // @@protoc_insertion_point(field_set:dto.NestedParent.RepEnum)
}
inline void NestedParent::add_repenum(::dto::EnumValue value) {
  assert(::dto::EnumValue_IsValid(value));
  repenum_.Add(value);
  // @@protoc_insertion_point(field_add:dto.NestedParent.RepEnum)
}
inline const ::google::protobuf::RepeatedField<int>&
NestedParent::repenum() const {
  // @@protoc_insertion_point(field_list:dto.NestedParent.RepEnum)
  return repenum_;
}
inline ::google::protobuf::RepeatedField<int>*
NestedParent::mutable_repenum() {
  // @@protoc_insertion_point(field_mutable_list:dto.NestedParent.RepEnum)
  return &repenum_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dto::EnumValue> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dto::EnumValue>() {
  return ::dto::EnumValue_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dto_2eproto__INCLUDED
